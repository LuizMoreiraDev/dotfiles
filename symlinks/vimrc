" .vimrc File
" Maintained by: Luiz Claudio Moreira Junior
" luiz@luizclaudiomoreira.com
" https://luizclaudiomoreira.com

"" plugins
" auto install Plug for managing plugins
augroup vimrc | autocmd! | augroup end
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo "$HOME/.vim/autoload/plug.vim" --create-dirs 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd vimrc VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Plug 'Yggdroot/indentLine' "
Plug 'ctrlpvim/ctrlp.vim'
Plug 'ervandew/supertab'
Plug 'gmarik/vundle'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/vim-easy-align'
Plug 'mg979/vim-visual-multi'
Plug 'scrooloose/nerdtree'
Plug 'slim-template/vim-slim'
" Plug 'thoughtbot/vim-rspec' "
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-rails'
Plug 'vim-autoformat/vim-autoformat'
Plug 'vim-ruby/vim-ruby'
" Plug 'wakatime/vim-wakatime'
" Plug 'autozimu/LanguageClient-neovim'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'morhetz/gruvbox'
" Plug 'altercation/vim-colors-solarized'
" Plug 'rafi/awesome-vim-colorschemes'
Plug 'fladson/vim-kitty'
Plug 'stanangeloff/php.vim'
Plug 'dsawardekar/wordpress.vim'

call plug#end()
"" / plugins

set nocompatible
set belloff=all
set encoding=utf-8
scriptencoding utf-8

let mapleader = ' '

set autoindent
set autoread
set colorcolumn=120
set cursorcolumn
set cursorline
set expandtab
set hidden
set ignorecase
set list listchars=tab:»»,trail:·
set mouse=a
set number
set relativenumber
set scrolloff=5
set shiftround
set shiftwidth=2
set smartindent
set softtabstop=2
set splitbelow
set splitright
set tabstop=2
set title
set wildmenu
set wildmode=list:longest
set wrap

let g:lightline = { 'colorscheme': 'wombat', 'active': { 'left': [ [ 'mode', 'paste' ], [ 'readonly', 'relativepath', 'modified' ] ], } }

if !has('nvim')
  set hlsearch
  set incsearch
  set wildmenu
  set wildmode=list:longest
  set laststatus=2
endif

" go to file:[line]
nnoremap <silent>gf :vertical botright wincmd F<CR>

" switch between the last two files
nnoremap <leader><leader> <c-^>

" copy / paste
vnoremap y  "+y
nnoremap yy "+yy
" nnoremap <leader>cp <esc>:let @+=@%<cr>
nnoremap <leader>cp <esc>:let @+ = expand("%")<cr>

" split
nnoremap vv :vsplit<cr>
nnoremap ss :split<cr>

" hide highlight search
nmap <silent>qq :silent :nohlsearch<CR>

" B = kill current buffer
" W = save current file
" Q = kill current pane/window
nnoremap <silent>B <esc>:bd<cr>
nnoremap <silent>W <esc>:w<cr>
nnoremap <silent>Q <esc><C-w>q

" move between split panes/windows using H, J, K, L
nnoremap <silent><C-h> <C-w>h
nnoremap <silent><C-l> <C-w>l
nnoremap <silent><C-k> <C-w>k
nnoremap <silent><C-j> <C-w>j

" paste toggle
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

" CtrlP
nnoremap <Leader>p :CtrlP<CR>
nnoremap <Leader>b :CtrlPBuffer<cr>
nnoremap <Leader>t :CtrlPMRUFiles<CR>
nnoremap <Leader>ja :CtrlP app<CR>
nnoremap <Leader>jl :CtrlP lib<CR>
nnoremap <Leader>jn :CtrlP models<CR>
nnoremap <Leader>jv :CtrlP app/views<CR>
nnoremap <Leader>jm :CtrlP app/models<CR>
nnoremap <Leader>jc :CtrjP app/controllers<CR>
nnoremap <Leader>ji :CtrlP app/assets/javascripts<CR>
nnoremap <Leader>jy :CtrlP app/assets/stylesheets<CR>
nnoremap <Leader>js :CtrlP spec<CR>
nnoremap <Leader>jf :CtrlP features<CR>

if exists("g:ctrlp_user_command")
  unlet g:ctrlp_user_command
endif
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s --files-with-matches -g "" --ignore "\.git$\|\.hg$\|\.svn$"'

  " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0
else
  " Fall back to using git ls-files if Ag is not available
  let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
  let g:ctrlp_user_command  = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
endif

" EasyAlign
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)

" NERDTree
let NERDTreeWinSize=50
nnoremap <Leader>k :NERDTreeToggle<CR>
" Stolen from https://github.com/skwp/dotfiles
function! FindInNerdTree()
  if &modifiable && strlen(expand('%')) > 0 && !&diff
    NERDTreeFind
  endif
endfunction
nnoremap <Leader>n :call FindInNerdTree()<CR>

" ctags
let g:Tlist_Ctags_Cmd="rm tags && ctags --exclude='*.js'"
if has("gui_running") && (has("gui_mac") || has("gui_macvim"))
  map <Leader>ct :!/usr/local/bin/ctags -R .<CR>
else
  map <Leader>ct :!ctags -R .<CR>
endif

" Tell the language client to use the default IP and port
" that Solargraph runs on
" let g:LanguageClient_serverCommands = {
"     \ 'ruby': ['tcp://localhost:7658']
"     \ }

" Don't send a stop signal to the server when exiting vim.
" This is optional, but I don't like having to restart Solargraph
" every time I restart vim.
" let g:LanguageClient_autoStop = 0

" Configure ruby omni-completion to use the language client:
" autocmd FileType ruby setlocal omnifunc=LanguageClient#complete

" auto format before saving
au BufWrite * :retab
au BufWrite * :RemoveTrailingSpaces

filetype on
filetype plugin on
filetype indent on
syntax   on
syntax   enable

" appearance
set background=dark
if isdirectory(expand("~/.vim/plugged/gruvbox"))
  colorscheme gruvbox
endif
if has("gui_running")
  set guioptions-=T " no toolbar or menus
  set guioptions-=r " no scrollbar on the right
  set guioptions-=R " no scrollbar on the right
  set guioptions-=l " no scrollbar on the left
  set guioptions-=b " no scrollbar on the bottom
  set guioptions-=L " no scrollbar on the nerdtree

  set t_Co=256 "tell the term has 256 colors

  if has("gui_mac") || has("gui_macvim")
    set guifont=Monaco:h10
    set transparency=5
    set fullscreen
  endif
else
  set termguicolors
  hi Normal guibg=NONE ctermbg=NONE
endif
" / appearance

set secure